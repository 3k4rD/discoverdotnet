//#n Wyam.Yaml
//#n Wyam.Razor
//#n Wyam.Markdown
//#n Wyam.Json
#n Octokit

using Octokit;

Pipelines.Add("Projects",
    ReadFiles("projects/*.md"),
    FrontMatter(Yaml()),    
    Execute((doc, ctx) =>
    {
        // Extract the GitHub owner and name
        Uri source;
        if(Uri.TryCreate(doc.String("Source"), UriKind.Absolute, out source)
            && source.Host.EndsWith("github.com", StringComparison.OrdinalIgnoreCase))
        {
            string owner = source.Segments[1].Trim('/');
            string name = source.Segments[2].Trim('/');

            // Connect to GitHub and get the repository
            Wyam.Common.Tracing.Trace.Information($"Getting GitHub data for {owner}/{name}");
            GitHubClient github = new GitHubClient(new ProductHeaderValue("discoverdotnet"))
            {
                Credentials = new Credentials(ctx.String("GitHubToken"))
            };
            Repository repository = github.Repository.Get(owner, name).Result;

            // Get the metadata
            MetadataItems metadata = new MetadataItems
            {
                { "StargazersCount", repository.StargazersCount },
                { "ForksCount", repository.ForksCount },
                { "OpenIssuesCount", repository.OpenIssuesCount }
            };
            if(!doc.ContainsKey("Description"))
            {
                metadata.Add("Description", repository.Description);
            }
            if(!doc.ContainsKey("Website"))
            {
                metadata.Add("Website", repository.Homepage);
            }

            // Return a document with GitHub metadata
            return ctx.GetDocument(doc, metadata);
        }
        return doc;
    }),
    Razor()
        .WithLayout("/_Layout.cshtml"),
    WriteFiles(".html"),
    Meta("Link", @ctx.GetLink(@doc)),
    GenerateJson(new []
    {
        "Title",
        "Link",
        "Description",
        "Source",
        "StargazersCount",
        "ForksCount",
        "OpenIssuesCount",
        "Website",
        "NuGet",
        "Twitter",
        "Chat",
        "Language",
        "Tags",
        "DiscoveryDate",
        "Comment"
    }, "Json")
        .WithCamelCase()
);

Pipelines.Add("ProjectsData",
    Content("[" + string.Join(",", @ctx.Documents.FromPipeline("Projects").Select(x => x.String("Json"))) + "]"),
    WriteFiles((doc, ctx) => "data/projects.json")
);

Pipelines.Add("Discoveries",
    Documents("Projects"),
    Where(@doc.ContainsKey("DiscoveryDate")),
    OrderBy(@doc.DateTime("DiscoveryDate"))
        .Descending(),
    Content(@doc.String("Json")),
    Branch(
        // Daily discovery
        Take(1),
        WriteFiles((doc, ctx) => "data/discovery.json")
    )
    // Past discoveries
    // TODO: skip 1, take 4 (or 8?)
    // TODO: RSS feed
);

Pipelines.Add("Pages",
    ReadFiles("**/{!_,}*.cshtml"),
    FrontMatter(Yaml()),
    Razor()
        .WithLayout("/_Layout.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("Resources",
    CopyFiles("**/*{!.cshtml,!.md,!.less,!.yml,}")
);